using Microsoft.IO;
using System;
using System.Runtime.CompilerServices;
using System.Text;

namespace PDB2ePubChs.HaoduPdbFiles.Internals
{
    internal static class Utils
    {
        public const string ConfigPath = "ReplacedChars.xml";

        public static readonly Encoding Big5 = Encoding.GetEncoding(950);

        public static readonly RecyclableMemoryStreamManager MSManager = new RecyclableMemoryStreamManager();

        public static readonly Exception Invalid_Pdb_File = new Exception("错误的PDB电子书格式.");
        public static readonly Exception Unsupported_Pdb_File = new Exception("暂不支持此格式的电子书.");

        public const string ConsoleHelper = "命令参数：\r\n        转换单个文件： -c [-a 作者名称] uPdb文件路径 [ePub文件路径]\r\n        转换多个文件： -l uPdb文件目录 [输出目录]\r\n        打包多个文件： -p 书籍名称 [-a 作者名称] uPdb文件目录 [ePub文件路径]\r\n\r\n方括号（[]）表示可选内容。\r\n如果路径中包括空格，必须用双引号（\"\"）把完整路径包裹起来。\r\n打包多个uPdb文件时，将按照文件名的顺序进行打包。";

        //  <?xml version="1.0" encoding="UTF-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>
        public static readonly byte[] Chapter_Start = { 0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x3F, 0x3E, 0x3C, 0x21, 0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x68, 0x74, 0x6D, 0x6C, 0x20, 0x50, 0x55, 0x42, 0x4C, 0x49, 0x43, 0x20, 0x22, 0x2D, 0x2F, 0x2F, 0x57, 0x33, 0x43, 0x2F, 0x2F, 0x44, 0x54, 0x44, 0x20, 0x58, 0x48, 0x54, 0x4D, 0x4C, 0x20, 0x31, 0x2E, 0x31, 0x2F, 0x2F, 0x45, 0x4E, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x77, 0x33, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x54, 0x52, 0x2F, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x31, 0x31, 0x2F, 0x44, 0x54, 0x44, 0x2F, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x31, 0x31, 0x2E, 0x64, 0x74, 0x64, 0x22, 0x3E, 0x3C, 0x68, 0x74, 0x6D, 0x6C, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x77, 0x33, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x31, 0x39, 0x39, 0x39, 0x2F, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x22, 0x3E, 0x3C, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E };
        //  </title><link href="../Styles/stylesheel.css" rel="stylesheet" type="text/css"/></head><body>
        public static readonly byte[] Chapter_Middle = { 0x3C, 0x2F, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E, 0x3C, 0x6C, 0x69, 0x6E, 0x6B, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x2E, 0x2E, 0x2F, 0x53, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x2F, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x6C, 0x2E, 0x63, 0x73, 0x73, 0x22, 0x20, 0x72, 0x65, 0x6C, 0x3D, 0x22, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x74, 0x22, 0x20, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2F, 0x63, 0x73, 0x73, 0x22, 0x2F, 0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x62, 0x6F, 0x64, 0x79, 0x3E };
        // </body></html>
        public static readonly byte[] Chapter_End = { 0x3C, 0x2F, 0x62, 0x6F, 0x64, 0x79, 0x3E, 0x3C, 0x2F, 0x68, 0x74, 0x6D, 0x6C, 0x3E };

        public static BytesBuffer ToUtf8String(this string str)
        {
            BytesBuffer buffer = new BytesBuffer(str.Length << 3);
            unsafe
            {
                fixed (void* p = str)
                fixed (byte* b = buffer.Buffer)
                    _ = Encoding.UTF8.GetBytes((char*)p, str.Length, b, str.Length << 3);
            }
            return buffer;
        }

        public static BytesBuffer ToUtf8String(in this Guid guid)
        {
            string s = guid.ToString();
            BytesBuffer buffer = new BytesBuffer(36);
            unsafe
            {
                fixed (void* p = s)
                fixed (byte* b = buffer.Buffer)
                    _ = Encoding.UTF8.GetBytes((char*)p, 36, b, 36);
            }
            return buffer;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe ushort ReadBigEndianUInt16(byte* buf)
        {
            return BitConverter.IsLittleEndian ?
                    (ushort)((*buf << 8) | (*(buf + 1))) :
                    *(ushort*)buf;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe int ReadBigEndianInt32(byte* buf)
        {
            return BitConverter.IsLittleEndian ?
                    (*buf << 24) | (*(buf + 1) << 16) | (*(buf + 2) << 8) | (*(buf + 3)) :
                    *(int*)buf;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static unsafe byte[] CreateBytes(byte* p, int length)
        {
            var result = new byte[length];
            fixed (byte* r = result)
                Unsafe.CopyBlock(r, p, (uint)length);

            return result;
        }



    }
}
