using PDB2ePubChs.HaoduPdbFiles.Internals;

using System;
using System.IO;
using System.IO.Compression;

namespace PDB2ePubChs.HaoduPdbFiles
{
    public static class Pdb2Epub
    {
        // <?xml version="1.0" encoding="UTF-8"?><package version="2.0" unique-identifier="BookId" xmlns="http://www.idpf.org/2007/opf"><metadata xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:opf="http://www.idpf.org/2007/opf"><dc:language>zh-CN</dc:language><dc:identifier id="BookId">538f9dc8-2a5a-4b1c-a00c-3821aa7feff4</dc:identifier><dc:title>
        private static readonly byte[] s_opf_1 = { 0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x3F, 0x3E, 0x3C, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x32, 0x2E, 0x30, 0x22, 0x20, 0x75, 0x6E, 0x69, 0x71, 0x75, 0x65, 0x2D, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3D, 0x22, 0x42, 0x6F, 0x6F, 0x6B, 0x49, 0x64, 0x22, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x69, 0x64, 0x70, 0x66, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x32, 0x30, 0x30, 0x37, 0x2F, 0x6F, 0x70, 0x66, 0x22, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x64, 0x63, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x70, 0x75, 0x72, 0x6C, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x64, 0x63, 0x2F, 0x65, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x73, 0x2F, 0x31, 0x2E, 0x31, 0x2F, 0x22, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x6F, 0x70, 0x66, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x69, 0x64, 0x70, 0x66, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x32, 0x30, 0x30, 0x37, 0x2F, 0x6F, 0x70, 0x66, 0x22, 0x3E, 0x3C, 0x64, 0x63, 0x3A, 0x6C, 0x61, 0x6E, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3E, 0x7A, 0x68, 0x2D, 0x43, 0x4E, 0x3C, 0x2F, 0x64, 0x63, 0x3A, 0x6C, 0x61, 0x6E, 0x67, 0x75, 0x61, 0x67, 0x65, 0x3E, 0x3C, 0x64, 0x63, 0x3A, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x42, 0x6F, 0x6F, 0x6B, 0x49, 0x64, 0x22, 0x3E, 0x35, 0x33, 0x38, 0x66, 0x39, 0x64, 0x63, 0x38, 0x2D, 0x32, 0x61, 0x35, 0x61, 0x2D, 0x34, 0x62, 0x31, 0x63, 0x2D, 0x61, 0x30, 0x30, 0x63, 0x2D, 0x33, 0x38, 0x32, 0x31, 0x61, 0x61, 0x37, 0x66, 0x65, 0x66, 0x66, 0x34, 0x3C, 0x2F, 0x64, 0x63, 0x3A, 0x69, 0x64, 0x65, 0x6E, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3E, 0x3C, 0x64, 0x63, 0x3A, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E };
        // </dc:title>
        private static readonly byte[] s_opf_2 = { 0x3C, 0x2F, 0x64, 0x63, 0x3A, 0x74, 0x69, 0x74, 0x6C, 0x65, 0x3E };
        // <dc:creator opf:role="aut">
        private static readonly byte[] s_opf_3 = { 0x3C, 0x64, 0x63, 0x3A, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6F, 0x72, 0x20, 0x6F, 0x70, 0x66, 0x3A, 0x72, 0x6F, 0x6C, 0x65, 0x3D, 0x22, 0x61, 0x75, 0x74, 0x22, 0x3E };
        // </dc:creator>
        private static readonly byte[] s_opf_4 = { 0x3C, 0x2F, 0x64, 0x63, 0x3A, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6F, 0x72, 0x3E };
        // </metadata><manifest><item id="ncx" href="toc.ncx" media-type="application/x-dtbncx+xml"/><item id="stylesheel.css" href="Styles/stylesheel.css" media-type="text/css"/>
        private static readonly byte[] s_opf_5 = { 0x3C, 0x2F, 0x6D, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x3E, 0x3C, 0x6D, 0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x3E, 0x3C, 0x69, 0x74, 0x65, 0x6D, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x6E, 0x63, 0x78, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x74, 0x6F, 0x63, 0x2E, 0x6E, 0x63, 0x78, 0x22, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2D, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x78, 0x2D, 0x64, 0x74, 0x62, 0x6E, 0x63, 0x78, 0x2B, 0x78, 0x6D, 0x6C, 0x22, 0x2F, 0x3E, 0x3C, 0x69, 0x74, 0x65, 0x6D, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x6C, 0x2E, 0x63, 0x73, 0x73, 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x53, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x2F, 0x73, 0x74, 0x79, 0x6C, 0x65, 0x73, 0x68, 0x65, 0x65, 0x6C, 0x2E, 0x63, 0x73, 0x73, 0x22, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2D, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x74, 0x65, 0x78, 0x74, 0x2F, 0x63, 0x73, 0x73, 0x22, 0x2F, 0x3E };
        // <item id="
        private static readonly byte[] s_opf_manifest_item1 = { 0x3C, 0x69, 0x74, 0x65, 0x6D, 0x20, 0x69, 0x64, 0x3D, 0x22 };
        // " href="Text/
        private static readonly byte[] s_opf_manifest_item2 = { 0x22, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3D, 0x22, 0x54, 0x65, 0x78, 0x74, 0x2F };
        // .xhtml" media-type="application/xhtml+xml"/>
        private static readonly byte[] s_opf_manifest_item3 = { 0x2E, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x22, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2D, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x2B, 0x78, 0x6D, 0x6C, 0x22, 0x2F, 0x3E };
        // <itemref idref="
        private static readonly byte[] s_opf_spine_item1 = { 0x3C, 0x69, 0x74, 0x65, 0x6D, 0x72, 0x65, 0x66, 0x20, 0x69, 0x64, 0x72, 0x65, 0x66, 0x3D, 0x22 };
        // "/>
        private static readonly byte[] s_opf_spine_item2 = { 0x22, 0x2F, 0x3E };


        // <?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE ncx PUBLIC "-//NISO//DTD ncx 2005-1//EN" "http://www.daisy.org/z3986/2005/ncx-2005-1.dtd"><ncx version="2005-1" xmlns="http://www.daisy.org/z3986/2005/ncx/"><head><meta name="dtb:depth" content=" 
        private static readonly byte[] s_ncx_1 = { 0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x20, 0x3F, 0x3E, 0x3C, 0x21, 0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45, 0x20, 0x6E, 0x63, 0x78, 0x20, 0x50, 0x55, 0x42, 0x4C, 0x49, 0x43, 0x20, 0x22, 0x2D, 0x2F, 0x2F, 0x4E, 0x49, 0x53, 0x4F, 0x2F, 0x2F, 0x44, 0x54, 0x44, 0x20, 0x6E, 0x63, 0x78, 0x20, 0x32, 0x30, 0x30, 0x35, 0x2D, 0x31, 0x2F, 0x2F, 0x45, 0x4E, 0x22, 0x20, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x61, 0x69, 0x73, 0x79, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x7A, 0x33, 0x39, 0x38, 0x36, 0x2F, 0x32, 0x30, 0x30, 0x35, 0x2F, 0x6E, 0x63, 0x78, 0x2D, 0x32, 0x30, 0x30, 0x35, 0x2D, 0x31, 0x2E, 0x64, 0x74, 0x64, 0x22, 0x3E, 0x3C, 0x6E, 0x63, 0x78, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x32, 0x30, 0x30, 0x35, 0x2D, 0x31, 0x22, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77, 0x77, 0x77, 0x2E, 0x64, 0x61, 0x69, 0x73, 0x79, 0x2E, 0x6F, 0x72, 0x67, 0x2F, 0x7A, 0x33, 0x39, 0x38, 0x36, 0x2F, 0x32, 0x30, 0x30, 0x35, 0x2F, 0x6E, 0x63, 0x78, 0x2F, 0x22, 0x3E, 0x3C, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x64, 0x74, 0x62, 0x3A, 0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x22 };
        // "/><meta name="dtb:uid" content="538f9dc8-2a5a-4b1c-a00c-3821aa7feff4"/><meta name="dtb:totalPageCount" content="0"/><meta name="dtb:maxPageNumber" content="0"/></head><docTitle><text>
        private static readonly byte[] s_ncx_2 = { 0x22, 0x2F, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x64, 0x74, 0x62, 0x3A, 0x75, 0x69, 0x64, 0x22, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x22, 0x35, 0x33, 0x38, 0x66, 0x39, 0x64, 0x63, 0x38, 0x2D, 0x32, 0x61, 0x35, 0x61, 0x2D, 0x34, 0x62, 0x31, 0x63, 0x2D, 0x61, 0x30, 0x30, 0x63, 0x2D, 0x33, 0x38, 0x32, 0x31, 0x61, 0x61, 0x37, 0x66, 0x65, 0x66, 0x66, 0x34, 0x22, 0x2F, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x64, 0x74, 0x62, 0x3A, 0x74, 0x6F, 0x74, 0x61, 0x6C, 0x50, 0x61, 0x67, 0x65, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x22, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x22, 0x30, 0x22, 0x2F, 0x3E, 0x3C, 0x6D, 0x65, 0x74, 0x61, 0x20, 0x6E, 0x61, 0x6D, 0x65, 0x3D, 0x22, 0x64, 0x74, 0x62, 0x3A, 0x6D, 0x61, 0x78, 0x50, 0x61, 0x67, 0x65, 0x4E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x22, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x3D, 0x22, 0x30, 0x22, 0x2F, 0x3E, 0x3C, 0x2F, 0x68, 0x65, 0x61, 0x64, 0x3E, 0x3C, 0x64, 0x6F, 0x63, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x3E, 0x3C, 0x74, 0x65, 0x78, 0x74, 0x3E };
        // </text></docTitle>
        private static readonly byte[] s_ncx_3 = { 0x3C, 0x2F, 0x74, 0x65, 0x78, 0x74, 0x3E, 0x3C, 0x2F, 0x64, 0x6F, 0x63, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x3E };
        // <docAuthor><text>
        private static readonly byte[] s_ncx_4 = { 0x3C, 0x64, 0x6F, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x3E, 0x3C, 0x74, 0x65, 0x78, 0x74, 0x3E };
        // </text></docAuthor>
        private static readonly byte[] s_ncx_5 = { 0x3C, 0x2F, 0x74, 0x65, 0x78, 0x74, 0x3E, 0x3C, 0x2F, 0x64, 0x6F, 0x63, 0x41, 0x75, 0x74, 0x68, 0x6F, 0x72, 0x3E };
        // <navMap>
        private static readonly byte[] s_ncx_6 = { 0x3C, 0x6E, 0x61, 0x76, 0x4D, 0x61, 0x70, 0x3E };
        // <navPoint id="MyID-
        private static readonly byte[] s_ncx_item1 = { 0x3C, 0x6E, 0x61, 0x76, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x20, 0x69, 0x64, 0x3D, 0x22, 0x4D, 0x79, 0x49, 0x44, 0x2D };
        // " playOrder="
        private static readonly byte[] s_ncx_item2 = { 0x22, 0x20, 0x70, 0x6C, 0x61, 0x79, 0x4F, 0x72, 0x64, 0x65, 0x72, 0x3D, 0x22 };
        // "><navLabel><text>
        private static readonly byte[] s_ncx_item3 = { 0x22, 0x3E, 0x3C, 0x6E, 0x61, 0x76, 0x4C, 0x61, 0x62, 0x65, 0x6C, 0x3E, 0x3C, 0x74, 0x65, 0x78, 0x74, 0x3E };
        // </text></navLabel><content src="Text/
        private static readonly byte[] s_ncx_item4 = { 0x3C, 0x2F, 0x74, 0x65, 0x78, 0x74, 0x3E, 0x3C, 0x2F, 0x6E, 0x61, 0x76, 0x4C, 0x61, 0x62, 0x65, 0x6C, 0x3E, 0x3C, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x20, 0x73, 0x72, 0x63, 0x3D, 0x22, 0x54, 0x65, 0x78, 0x74, 0x2F };
        // .xhtml"/></navPoint>
        private static readonly byte[] s_ncx_item5 = { 0x2E, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x22, 0x2F, 0x3E, 0x3C, 0x2F, 0x6E, 0x61, 0x76, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x3E };
        // .xhtml"/>
        private static readonly byte[] s_ncx_parent1 = { 0x2E, 0x78, 0x68, 0x74, 0x6D, 0x6C, 0x22, 0x2F, 0x3E };
        // </navPoint>
        private static readonly byte[] s_ncx_parent2 = { 0x3C, 0x2F, 0x6E, 0x61, 0x76, 0x50, 0x6F, 0x69, 0x6E, 0x74, 0x3E };


        // <h1>《
        private static readonly byte[] s_l = { 0x3C, 0x68, 0x31, 0x3E, 0xE3, 0x80, 0x8A };
        // 》
        private static readonly byte[] s_r1 = { 0xE3, 0x80, 0x8B };
        // </h1>
        private static readonly byte[] s_r2 = { 0x3C, 0x2F, 0x68, 0x31, 0x3E };

        public static void CreateEpub(PdbArchive archive, string path, string authorName = null)
        {
            EpubStreams streams = new EpubStreams(path);
            try
            {
                WriteBookName(in streams, archive.BookNameBuffer, 0x31); //1

                if (authorName != null)
                    using (BytesBuffer buf = authorName.ToUtf8String())
                        WriteAuthorName(in streams, buf);
                else if (archive.AuthorBuffer.Length > 0)
                    WriteAuthorName(in streams, archive.AuthorBuffer);

                streams.Opf.Write(s_opf_5, 0, s_opf_5.Length);
                streams.Ncx.Write(s_ncx_6, 0, s_ncx_6.Length);

                for (int i = 0; i < archive.Chapters.Length; i++)
                    WriteIndexItem(in streams, archive, archive.Chapters[i], i + 1);

                streams.Final();
            }
            finally
            {
                streams.Dispose();
            }

        }

        public static void CreateEpub(string path, string bookName, System.Collections.IList archives /*todo: fuck wpf */, string authorName = null)
        {
            EpubStreams streams = new EpubStreams(path);
            try
            {
                using (BytesBuffer bf = BytesBuffer.CreateFromString(bookName))
                    WriteBookName(in streams, bf, 0x32); //2

                if (!string.IsNullOrWhiteSpace(authorName))
                    using (BytesBuffer bf = BytesBuffer.CreateFromString(bookName))
                        WriteAuthorName(in streams, bf);

                streams.Opf.Write(s_opf_5, 0, s_opf_5.Length);
                streams.Ncx.Write(s_ncx_6, 0, s_ncx_6.Length);

                PdbArchive archive;
                int i = 0, j = 0, k = 1;
                while (i < archives.Count)
                {
                    /*todo: fuck wpf again */
                    archive = archives[i] as PdbArchive;
                    WriteIndexItemParent(in streams, archive, k++);
                    j = 0;
                    while (j < archive.Chapters.Length)
                    {
                        WriteIndexItem(in streams, archive, archive.Chapters[j], k++);
                        ++j;
                    }
                    streams.Ncx.Write(s_ncx_parent2, 0, s_ncx_parent2.Length);
                    ++i;
                }
                streams.Final();
            }
            finally
            {
                streams.Dispose();
            }

        }

        private static void WriteBookName(in EpubStreams streams, BytesBuffer bookName, byte depth)
        {
            streams.Opf.Write(s_opf_1, 0, s_opf_1.Length);
            streams.Ncx.Write(s_ncx_1, 0, s_ncx_1.Length);
            streams.Ncx.WriteByte(depth);
            streams.Ncx.Write(s_ncx_2, 0, s_ncx_2.Length);
            streams.Opf.Write(bookName, 0, bookName.Length);
            streams.Ncx.Write(bookName, 0, bookName.Length);
            streams.Opf.Write(s_opf_2, 0, s_opf_2.Length);
            streams.Ncx.Write(s_ncx_3, 0, s_ncx_3.Length);
        }

        private static void WriteAuthorName(in EpubStreams streams, BytesBuffer authorName)
        {
            streams.Opf.Write(s_opf_3, 0, s_opf_3.Length);
            streams.Opf.Write(authorName, 0, authorName.Length);
            streams.Opf.Write(s_opf_4, 0, s_opf_4.Length);
            streams.Ncx.Write(s_ncx_4, 0, s_ncx_4.Length);
            streams.Ncx.Write(authorName, 0, authorName.Length);
            streams.Ncx.Write(s_ncx_5, 0, s_ncx_5.Length);
        }

        private static void WriteIndexItem(in EpubStreams streams, PdbArchive archive, PdbChapterInfo chapter, int index)
        {
            using (MemoryStream m = archive.CreateHtmlStream(chapter))
                _ = streams.Zip.AddStream(ZipStorer.Compression.Deflate, $@"OEBPS\Text\{index}_{chapter.ID}.xhtml", m, DateTime.Now, string.Empty);

            using (BytesBuffer guid = chapter.ID.ToUtf8String(), idx = BytesBuffer.CreateFromString(index.ToString()))
                WriteOpfNcxItem(in streams, guid, idx, chapter.NameBuffer, s_ncx_item5);
        }


        private static void WriteIndexItemParent(in EpubStreams streams, PdbArchive archive, int index)
        {
            using (MemoryStream m = Utils.MSManager.GetStream())
            {
                m.Write(Utils.Chapter_Start, 0, Utils.Chapter_Start.Length);
                m.Write(archive.BookNameBuffer, 0, archive.BookNameBuffer.Length);
                m.Write(Utils.Chapter_Middle, 0, Utils.Chapter_Middle.Length);
                m.Write(s_l, 0, s_l.Length);
                m.Write(archive.BookNameBuffer, 0, archive.BookNameBuffer.Length);
                m.Write(s_r1, 0, s_r1.Length);
                if (archive.AuthorBuffer.Length > 0)
                    m.Write(archive.AuthorBuffer, 0, archive.AuthorBuffer.Length);
                m.Write(s_r2, 0, s_r2.Length);
                m.Write(Utils.Chapter_End, 0, Utils.Chapter_End.Length);
                _ = m.Seek(0, SeekOrigin.Begin);
                _ = streams.Zip.AddStream(ZipStorer.Compression.Deflate, $@"OEBPS\Text\{index}_{archive.ID}.xhtml", m, DateTime.Now, string.Empty);
            }

            using (BytesBuffer guid = archive.ID.ToUtf8String(), idx = BytesBuffer.CreateFromString(index.ToString()))
                WriteOpfNcxItem(in streams, guid, idx, archive.BookNameBuffer, s_ncx_parent1);
        }


        private static void WriteOpfNcxItem(in EpubStreams streams, BytesBuffer guid, BytesBuffer idx, BytesBuffer name, byte[] end)
        {
            streams.Opf.Write(s_opf_manifest_item1, 0, s_opf_manifest_item1.Length);
            WriteFileName(streams.Opf, guid, idx);
            streams.Opf.Write(s_opf_manifest_item2, 0, s_opf_manifest_item2.Length);
            WriteFileName(streams.Opf, guid, idx);
            streams.Opf.Write(s_opf_manifest_item3, 0, s_opf_manifest_item3.Length);

            streams.TempOpf.Write(s_opf_spine_item1, 0, s_opf_spine_item1.Length);
            WriteFileName(streams.TempOpf, guid, idx);
            streams.TempOpf.Write(s_opf_spine_item2, 0, s_opf_spine_item2.Length);

            streams.Ncx.Write(s_ncx_item1, 0, s_ncx_item1.Length);
            streams.Ncx.Write(idx, 0, idx.Length);
            streams.Ncx.Write(s_ncx_item2, 0, s_ncx_item2.Length);
            streams.Ncx.Write(idx, 0, idx.Length);
            streams.Ncx.Write(s_ncx_item3, 0, s_ncx_item3.Length);
            streams.Ncx.Write(name, 0, name.Length);
            streams.Ncx.Write(s_ncx_item4, 0, s_ncx_item4.Length);
            WriteFileName(streams.Ncx, guid, idx);
            streams.Ncx.Write(end, 0, end.Length);
        }



        private static void WriteFileName(MemoryStream ms, BytesBuffer guid, BytesBuffer idx)
        {
            ms.Write(idx, 0, idx.Length);
            ms.WriteByte(0x5F); // _
            ms.Write(guid, 0, guid.Length);
        }

        private readonly ref struct EpubStreams
        {
            // application/epub+zip
            private static readonly byte[] s_mineType = { 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x65, 0x70, 0x75, 0x62, 0x2B, 0x7A, 0x69, 0x70 };
            // <?xml version="1.0" encoding="UTF-8" ?><container version="1.0" xmlns="urn:oasis:names:tc:opendocument:xmlns:container"><rootfiles><rootfile full-path="OEBPS/content.opf" media-type="application/oebps-package+xml"/></rootfiles></container>
            private static readonly byte[] s_container = { 0x3C, 0x3F, 0x78, 0x6D, 0x6C, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x65, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x3D, 0x22, 0x55, 0x54, 0x46, 0x2D, 0x38, 0x22, 0x20, 0x3F, 0x3E, 0x3C, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x22, 0x31, 0x2E, 0x30, 0x22, 0x20, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3D, 0x22, 0x75, 0x72, 0x6E, 0x3A, 0x6F, 0x61, 0x73, 0x69, 0x73, 0x3A, 0x6E, 0x61, 0x6D, 0x65, 0x73, 0x3A, 0x74, 0x63, 0x3A, 0x6F, 0x70, 0x65, 0x6E, 0x64, 0x6F, 0x63, 0x75, 0x6D, 0x65, 0x6E, 0x74, 0x3A, 0x78, 0x6D, 0x6C, 0x6E, 0x73, 0x3A, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x22, 0x3E, 0x3C, 0x72, 0x6F, 0x6F, 0x74, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x3E, 0x3C, 0x72, 0x6F, 0x6F, 0x74, 0x66, 0x69, 0x6C, 0x65, 0x20, 0x66, 0x75, 0x6C, 0x6C, 0x2D, 0x70, 0x61, 0x74, 0x68, 0x3D, 0x22, 0x4F, 0x45, 0x42, 0x50, 0x53, 0x2F, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x2E, 0x6F, 0x70, 0x66, 0x22, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2D, 0x74, 0x79, 0x70, 0x65, 0x3D, 0x22, 0x61, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x2F, 0x6F, 0x65, 0x62, 0x70, 0x73, 0x2D, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x2B, 0x78, 0x6D, 0x6C, 0x22, 0x2F, 0x3E, 0x3C, 0x2F, 0x72, 0x6F, 0x6F, 0x74, 0x66, 0x69, 0x6C, 0x65, 0x73, 0x3E, 0x3C, 0x2F, 0x63, 0x6F, 0x6E, 0x74, 0x61, 0x69, 0x6E, 0x65, 0x72, 0x3E };
            // body{font-family:Helvetica,sans-serif;white-space:pre-wrap!important;word-wrap:break-word!important;}
            private static readonly byte[] s_stylesheel = { 0x62, 0x6F, 0x64, 0x79, 0x7B, 0x66, 0x6F, 0x6E, 0x74, 0x2D, 0x66, 0x61, 0x6D, 0x69, 0x6C, 0x79, 0x3A, 0x48, 0x65, 0x6C, 0x76, 0x65, 0x74, 0x69, 0x63, 0x61, 0x2C, 0x73, 0x61, 0x6E, 0x73, 0x2D, 0x73, 0x65, 0x72, 0x69, 0x66, 0x3B, 0x77, 0x68, 0x69, 0x74, 0x65, 0x2D, 0x73, 0x70, 0x61, 0x63, 0x65, 0x3A, 0x70, 0x72, 0x65, 0x2D, 0x77, 0x72, 0x61, 0x70, 0x21, 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x61, 0x6E, 0x74, 0x3B, 0x77, 0x6F, 0x72, 0x64, 0x2D, 0x77, 0x72, 0x61, 0x70, 0x3A, 0x62, 0x72, 0x65, 0x61, 0x6B, 0x2D, 0x77, 0x6F, 0x72, 0x64, 0x21, 0x69, 0x6D, 0x70, 0x6F, 0x72, 0x74, 0x61, 0x6E, 0x74, 0x3B, 0x7D };

            //</manifest><spine toc="ncx">
            private static readonly byte[] s_opf_start = { 0x3C, 0x2F, 0x6D, 0x61, 0x6E, 0x69, 0x66, 0x65, 0x73, 0x74, 0x3E, 0x3C, 0x73, 0x70, 0x69, 0x6E, 0x65, 0x20, 0x74, 0x6F, 0x63, 0x3D, 0x22, 0x6E, 0x63, 0x78, 0x22, 0x3E };
            //</spine></package>
            private static readonly byte[] s_opf_final = { 0x3C, 0x2F, 0x73, 0x70, 0x69, 0x6E, 0x65, 0x3E, 0x3C, 0x2F, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x3E };

            //</navMap></ncx>
            private static readonly byte[] s_ncx_final = { 0x3C, 0x2F, 0x6E, 0x61, 0x76, 0x4D, 0x61, 0x70, 0x3E, 0x3C, 0x2F, 0x6E, 0x63, 0x78, 0x3E };


            private const string Path_Mimetype = "mimetype";
            private const string Path_Container = @"META-INF\container.xml";
            private const string Path_StyleSheet = @"OEBPS\Styles\stylesheel.css";
            private const string Path_Content = @"OEBPS\content.opf";
            private const string Path_Toc = @"OEBPS\toc.ncx";

            public readonly ZipStorer Zip;
            public readonly MemoryStream Opf;
            public readonly MemoryStream Ncx;
            public readonly MemoryStream TempOpf;

            public EpubStreams(string path)
            {
                Zip = null;
                try
                {
                    Zip = InitZipStream(path);
                }
                catch
                {
                    Zip?.Dispose();
                    throw;
                }
                Opf = Utils.MSManager.GetStream();
                Ncx = Utils.MSManager.GetStream();
                TempOpf = Utils.MSManager.GetStream();
            }

            public void Final()
            {
                Opf.Write(s_opf_start, 0, s_opf_start.Length);
                Ncx.Write(s_ncx_final, 0, s_ncx_final.Length);
                _ = TempOpf.Seek(0, SeekOrigin.Begin);
                TempOpf.CopyTo(Opf);
                Opf.Write(s_opf_final, 0, s_opf_final.Length);
                _ = Opf.Seek(0, SeekOrigin.Begin);
                _ = Ncx.Seek(0, SeekOrigin.Begin);
                _ = Zip.AddStream(ZipStorer.Compression.Deflate, Path_Content, Opf, DateTime.Now, string.Empty);
                _ = Zip.AddStream(ZipStorer.Compression.Deflate, Path_Toc, Ncx, DateTime.Now, string.Empty);
            }


            public void Dispose()
            {
                Zip.Dispose();
                Opf.Dispose();
                Ncx.Dispose();
                TempOpf.Dispose();
            }

            private static ZipStorer InitZipStream(string path)
            {
                ZipStorer storer = ZipStorer.Create(path, string.Empty);
                storer.EncodeUTF8 = true;
                using (MemoryStream StmMinetype = Utils.MSManager.GetStream(), StmContainer = Utils.MSManager.GetStream(), StmCSS = Utils.MSManager.GetStream())
                {
                    StmMinetype.Write(s_mineType, 0, s_mineType.Length);
                    StmContainer.Write(s_container, 0, s_container.Length);
                    StmCSS.Write(s_stylesheel, 0, s_stylesheel.Length);
                    _ = StmMinetype.Seek(0, SeekOrigin.Begin);
                    _ = StmContainer.Seek(0, SeekOrigin.Begin);
                    _ = StmCSS.Seek(0, SeekOrigin.Begin);
                    _ = storer.AddStream(ZipStorer.Compression.Store, Path_Mimetype, StmMinetype, DateTime.Now, string.Empty);  //minetype 文件
                    _ = storer.AddStream(ZipStorer.Compression.Deflate, Path_Container, StmContainer, DateTime.Now, string.Empty); //META-INF\container.xml文件
                    _ = storer.AddStream(ZipStorer.Compression.Deflate, Path_StyleSheet, StmCSS, DateTime.Now, string.Empty); //样式表文件。
                }
                return storer;
            }
        }

    }
}

